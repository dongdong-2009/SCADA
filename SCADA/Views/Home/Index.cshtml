@{
    ViewData["Title"] = "Home Page";
}
<script src="~/lib/jsplumb/draggable.js"></script>
<script src="~/lib/jsplumb/jsplumb.js"></script>
<script src="~/lib/jsplumb/svg.js"></script>
<script src="~/lib/colorPicker/colorpicker.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
<style>
    * {
        padding: 0;
        margin: 0;
    }

    #FlowDesign, #FlowDesign > div {
        height: 90%;
        min-height: 650px;
    }

    .monitorObj {
        width: 100px;
        height: 50px;
        border: 1px solid #ccc;
        text-align: center;
        position: absolute;
        top: 0;
        left: 0;
        justify-content: center;
        align-items: center;
        background-color: #ff6a00;
    }

    .dragPoint {
    }

        .dragPoint:hover {
            background-color: aquamarine;
        }

    .dragHover {
        background-color: aquamarine;
    }


    #jsLayout {
        position: relative;
    }

    #colorShow {
        width: 35px;
        height: 35px;
        border: 1px solid #000000;
        padding: 1px;
        float: left;
    }

    #picker {
        width: 160px;
        height: 160px;
        display: none;
        float: right;
    }

    #pickerLeft {
        width: 84%;
        height: 100%;
        float: left;
    }

    #pickerRight {
        width: 15%;
        height: 100%;
        float: right
    }

    .data {
        width: 100%;
        min-height: 1px;
        height: 20px;
    }

    .datalist {
        list-style: none;
    }
</style>
<div id="FlowDesign" class="row">
    <h2 class="text-center">流程图设计界面</h2>
    <p class="col-sm-12">
        <a href="#" class="btn btn-info btn-sm" onclick="saveAll()">保存</a>
        <a href="#" class="btn btn-info btn-sm" onclick="loadAll()">加载</a>
    </p>
    <div class="col-sm-2">
        <div id="list" class="list-group">
            <a href="#" class="list-group-item" data-deviceType="text" data-name="文本" data-type="text" data-icon="text-size">
                <i class="glyphicon glyphicon-text-size"></i> 文本
            </a>
            <a href="#" class="list-group-item" data-deviceType="concentrator" data-name="集中器" data-type="concentrator" data-icon="bed">
                <i class="glyphicon glyphicon-bed"></i> 集中器
            </a>
            <a href="#" class="list-group-item" data-deviceType="water" data-name="水表" data-type="water" data-icon="tint">
                <i class="glyphicon glyphicon-tint"></i> 水表
            </a>
            <a href="#" class="list-group-item" data-deviceType="electric" data-name="电表" data-type="electric" data-icon="flash">
                <i class="glyphicon glyphicon-flash"></i> 电表
            </a>
            <a href="#" class="list-group-item" data-deviceType="gas" data-name="汽表" data-type="gas" data-icon="fire">
                <i class="glyphicon glyphicon-fire"></i> 汽表
            </a>
        </div>
    </div>
    <div class="col-sm-8  table-bordered" id="jsLayout">
    </div>
    <div class="col-sm-2">
        <ul class="nav nav-tabs">
            <li class="active" id="nav-style">
                <a href="#" onclick="toggleShow('style')">样式</a>
            </li>
            @*<li class="" id="nav-events">
                    <a href="#" onclick="toggleShow('events')">属性</a>
                </li>*@
        </ul>
        <div id="tabs" class="tab-content body-content" style="padding-top:10px;">
            <div class="tab-pane active" id="tab-style">
                <div class="form-horizontal">
                    <div class="form-group form-group-sm">
                        <label class="col-sm-3 control-label">宽度:</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" name="offsetWidth">
                        </div>
                    </div>
                    <div class="form-group form-group-sm">
                        <label for="inputPassword" class="col-sm-3 control-label">长度:</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" name="offsetHeight">
                        </div>
                    </div>
                    <div class="form-group form-group-sm">
                        <label for="inputPassword" class="col-sm-3 control-label">背景色:</label>
                        <div class="col-sm-9">
                            @*<input type="text" class="form-control" onclick="changeColor()" name="background-color">*@
                            <div id="colorShow" name="background-color" onclick="changeColor()">
                            </div>
                            <div id="picker">
                                <div id="pickerLeft"></div>
                                <div id="pickerRight"></div>
                            </div>
                        </div>
                    </div>
                    @*<div class="form-group form-group-sm">
                        <label for="inputPassword" class="col-sm-3 control-label">显示名称:</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" name="text">
                        </div>
                    </div>*@
                    <div class="form-group form-group-sm">
                        <label for="inputPassword" class="col-sm-3 control-label">设备:</label>
                        <div class="col-sm-9">
                            <select class="form-control" name="device">
                                <option value="0">请选择设备</option>
                                <option value="10101">设备一</option>
                                <option value="10102">设备二</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group form-group-sm">
                        <a href="#" onclick="saveSet()" class="btn btn-sm btn-info">保存</a>
                    </div>
                </div>
            </div>
            <div class="tab-pane" id="tab-events">
                <div class="form-horizontal">
                    <div class="form-group form-group-sm">
                        <label class="col-sm-3 control-label">设备:</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" name="meter">
                        </div>
                    </div>
                    <div class="form-group form-group-sm">
                        <label for="inputPassword" class="col-sm-3 control-label">事件2:</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control" name="events2">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="content" style="display:block;">
    <div id="water">
        <div style="width:150px;height:220px;">
            <ul class="datalist">
                <li>瞬时流量：{{:instanceFlow}}</li>
                <li>表码：10101293</li>
                <li>设备状态：s</li>
                <li>4月13日 10:56:21</li>
            </ul>
        </div>
    </div>
    <div id="gas">
        <div style="width:150px;height:200px;">
            <ul class="datalist">
                <li>瞬时流量：123</li>
                <li>表码：10101293</li>
                <li>设备状态：s</li>
                <li>4月13日 10:56:21</li>
            </ul>
        </div>
    </div>
    <div id="electric">
        <div style="width:150px;height:200px;text-align:left;padding-left:0;">
            <ul class="datalist" style="margin-left:0;">
                <li>正向有功：123</li>
                <li>正向有功：123</li>
                <li>正向有功：123</li>
                <li>正向有功：123</li>
                <li>正向有功：123</li>
                <li>正向有功：123</li>
                <li>表码：10101293</li>
                <li>设备状态：s</li>
                <li>4月13日 10:56:21</li>
            </ul>
        </div>
    </div>
    <div id="concentrator">
        <div style="width:150px;height:200px;text-align:left;">
            <ul class="datalist">
                <li>设备状态：s</li>
                <li>4月13日 10:56:21</li>
            </ul>
        </div>
    </div>
    <div class="others">
        <div style="width:150px;height:200px;">
            详情
        </div>
    </div>
</div>
<script>
    var currentElement, colorPick, clickFlag = false, instance,
        nodes = [],
        edges = [];
    var jspConfig = {
        count: {
            text: 0,
            concentrator: 0,
            water: 0,
            electric: 0,
            gas: 0
        },
        my_endpoint: {
            endpoint: ["Dot", { radius: 2 }],
            paintStyle: {
                strokeStyle: "#1e8151",
                fillStyle: "transparent",
                radius: 6,
                lineWidth: 1
            },
            hoverPaintStyle: { fill: "#449999" },
            isSource: true,
            connectorStyle: {
                strokeWidth: 2,
                stroke: "#c0c0c0",
            },
            connectorHoverStyle: {
                stroke: "#0c0c0c",
            },
            connector: ["Flowchart"],
            isTarget: true,
            beforeDrop: function (params) {
                if (params.sourceId === params.targetId) {
                    return false
                } else {
                    return true
                }
            },
            //dropOptions: exampleDropOptions
        },
        init: function (connection) {
            connection.getOverlay("label").setLabel(connection.sourceId.substring(15) + "-" + connection.targetId.substring(15));
        }
    }
    jsPlumb.bind("ready", function () {
        var layout = document.getElementById("jsLayout");
        jsPlumb.setContainer('jsLayout');
        instance = jsPlumb.getInstance({
            Endpoint: ["Dot", { radius: 2 }],
            EndpointHoverStyle: { fill: "orange" },
            HoverPaintStyle: { strokeStyle: "#orange", lineWidth: 1 },
            ConnectionOverlays: [
                ["Arrow", { location: 1, id: "arrow", length: 10, foldback: 0.5, width: 2 }],
                ["Label", { label: "", id: "label-1", location: 0.25, cssClass: "labelstyle" }],
            ],
            DragOptions: { cursor: 'pointer', zIndex: 2000 },
            Anchors: ["TopCenter", "TopCenter"],
            PaintStyle: { stroke: '#666' },
            MaxConnections: -1,//最大连接数
        });

        // suspend drawing and initialise.
        instance.batch(function () {
            // listen for new connections; initialise them the same way we initialise the connections at startup.
            instance.bind("connection", function (connInfo, originalEvent) {
                jspConfig.init(connInfo.connection);
            });

            instance.bind("click", function (conn, originalEvent) {
                // if (confirm("Delete connection from " + conn.sourceId + " to " + conn.targetId + "?"))
                instance.deleteConnection(conn);
            });
            sortable(document.getElementById('list'), function (item, evt) {
                var startPoint = _isInCanvas(evt, layout);
                if (startPoint) {
                    _createElements(startPoint, item.dataset);

                }
            });
            function _createElements(startPoint, types) {
                var now = new Date();
                var id = types.type + "_" + now.getMinutes() + now.getMilliseconds();
                var node = {
                    id: id,
                    style: {
                        left: startPoint.x + "px",
                        top: startPoint.y + "px",
                    },
                    text: types.name + jspConfig.count[types.type]++,
                    type: types.type,
                    icon: "glyphicon glyphicon-" + types.icon + " " + types.type
                }
                var t = template(node);
                document.getElementById("jsLayout").appendChild(t);
                setTimeout(_registerEvent({ id: id }), 1);
                addPoint(id, jspConfig.my_endpoint);
            }
            instance.bind("connectionDrag", function (connection) {

                console.log("connection " + connection.id + " is being dragged. suspendedElement is ", connection.suspendedElement, " of type ", connection.suspendedElementType);
            });

            instance.bind("connectionDragStop", function (connection) {
                console.log("connection " + connection.id + " was dragged");
            });

            instance.bind("connectionMoved", function (params) {

                console.log("connection " + params.connection.id + " was moved");
            });
        });
        function _isInCanvas(evt, toElements) {//判断是否在相应的元素内
            var startPoint;
            if (toElements && evt && toElements.getBoundingClientRect()) {
                ePosition = toElements.getBoundingClientRect();
                if ((evt.clientX > ePosition.left && evt.clientX < ePosition.left + toElements.offsetWidth)
                    && (evt.clientY > ePosition.top && evt.clientY < ePosition.top + toElements.offsetHeight)) {
                    startPoint = { x: 0, y: 0 };
                    startPoint.x = (evt.clientX - ePosition.left).toFixed(2);
                    startPoint.y = (evt.clientY - ePosition.top).toFixed(2);
                }
            }
            return startPoint;
        };

    });
    function addPoint(id, style) {
        instance.addEndpoint(id, { anchor: "TopCenter", uuid: "TopCenter_" + id }, style);
        instance.addEndpoint(id, { anchor: "RightMiddle", uuid: "RightMiddle_" + id }, style);
        instance.addEndpoint(id, { anchor: "BottomCenter", uuid: "BottomCenter_" + id }, style);
        instance.addEndpoint(id, { anchor: "LeftMiddle", uuid: "LeftMiddle_" + id }, style);
        instance.draggable(id);
        instance.repaintEverything();
    }
    function template(node) {
        var div1Config = {
            id: node.id,
            className: "dragPoint monitorObj",
            style: node.style,
            dataset: node.dataset
        };
        var div1 = createElement("div", div1Config);
        var div2 = createElement("div", { className: "data" });
        var div3 = createElement("div");
        var i = createElement("i", { className: node.icon });
        var spanText = createElement("font")
        div3.appendChild(i);
        spanText.appendChild(document.createTextNode(node.text))
        div3.appendChild(spanText);
        div1.appendChild(div3);
        div1.appendChild(div2);
        return div1;
    }
    function createElement(eleType, options) {
        var elements = document.createElement(eleType);
        for (var key in options) {
            if (typeof options[key] == 'object') {
                var obj = options[key];
                for (var o in obj) {
                    var a = obj[o];
                    elements[key][o] = a;
                }
            } else {
                elements[key] = options[key]
            }
        }
        return elements;

    }
    function _registerEvent(element) {
        var ele = document.getElementById(element.id);
        ele.addEventListener("click", function (e) {
            getProperty(ele, ["offsetHeight", "offsetWidth", "background-color"]);
            getName(this);
            currentElement = this;
            e.preventDefault();
        }, true);
        getInfomation(ele);
    }
    (function () {
        initColorPicker();
        //var el = document.querySelector("#tabs .tab-pane");
        // el.style.display = "block";
    })()
    function toggleShow(type) {
        var currentEle = document.getElementById('nav-' + type),
            currentTab = document.getElementById('tab-' + type);
        if (currentEle && currentEle.parentNode && currentEle.parentNode.children) {
            var lis = currentEle.parentNode.children,
                tabs = document.getElementById("tabs").children;
            for (var i = 0, len = lis.length; i < len; i++) {
                if (lis[i].id == ('nav-' + type)) {
                    lis[i].className += 'active';
                } else {
                    lis[i].className = lis[i].className.replace('active', '');
                }
                if (tabs[i].id == ('tab-' + type)) {
                    tabs[i].className += 'active';
                } else {
                    var temp = tabs[i].className;
                    tabs[i].className = temp.replace('active', '');
                }
            }
        }
    }
    function saveSet() {
        setProperty(currentElement, ["offsetHeight", "offsetWidth"]);
        connectDevices(currentElement);
        
    }
    function setProperty(element, options) {
        if (options && options.length > 0) {
            for (var i = 0, len = options.length; i < len; i++) {
                var t = document.getElementsByName(options[i])[0];
                if (t) {
                    if (options[i] == "offsetHeight") {
                        element.style.height = t.value + 'px';
                        continue;
                    }
                    if (options[i] == "offsetWidth") {
                        element.style.width = t.value + 'px';
                        continue;
                    }
                    if (element[options[i]]) {
                        element[options[i]] = t.value;
                    } else {
                        element.style[options[i]] = t.value;
                    }
                }
            }
        }
    }
    function getProperty(element, options) {
        if (options && options.length > 0) {
            for (var i = 0, len = options.length; i < len; i++) {
                var t = document.getElementsByName(options[i])[0];
                if (t) {
                    if (element[options[i]]) {
                        t.value = element[options[i]];
                    } else {
                        var temp = getComputedStyle ? getComputedStyle(element, null) : element.currentStyle;
                        if (options[i] == 'background-color') {
                            var rgb = temp[options[i]];
                            document.getElementById("colorShow").style.backgroundColor = rgb;
                            continue;
                        }
                        t.value = temp[options[i]];
                    }
                }

            }

        }
    }
    function getName(element) {
        //if (element && element.children.length > 0) {
        //    var temp = element.children[0].children;
        //    for (var i = 0, len = temp.length; i < len; i++) {
        //        if (temp[i].nodeName == 'FONT') {
        //            //document.getElementsByName("text")[0].value = temp[i].innerHTML;
        //        }
        //    }

        //}
        if (element) {
            var deviceId = element.dataset.device;
            if (deviceId) {
                document.getElementsByName("device")[0].value = deviceId;
            }
           
        }
    }

    function setName(element,name) {
        if (element && element.children.length > 0) {
            var temp = element.children[0].children;
            for (var i = 0, len = temp.length; i < len; i++) {
                if (temp[i].nodeName == 'FONT') {

                    temp[i].innerHTML = name;
                }
            }
        }
    }
    function changeColor() {
        var p = document.getElementById("picker");
        if (clickFlag) {
            p.style.display = "none";
            clickFlag = false;
        } else {
            p.style.display = "block";
            clickFlag = true;
        }

    }
    function initColorPicker() {
        var d = document.getElementById("colorShow"),
            l = document.getElementById("pickerLeft"),
            r = document.getElementById("pickerRight");
        if (!colorPick) {
            colorPick = ColorPicker(r, l, function (hex) {
                if (currentElement) {
                    d.style.backgroundColor = hex;
                    currentElement.style.backgroundColor = hex;
                }
            })
        }
    }
    function saveAll() {
        var eles = document.querySelectorAll(".monitorObj")
        for (var i = 0, len = eles.length; i < len; i++) {
            var e = eles[i], node = {
                style: {},
                dataset: {}
            };
            node.id = e.id;
            node.icon = e.children[0].children[0].className;
            node.text = e.children[0].children[1].innerHTML;
            node.type = getType(e);
            node.style.height = e.offsetHeight;
            node.style.width = e.offsetWidth;
            node.style.left = e.style.left;
            node.style.top = e.style.top;
            node.style.backgroundColor = e.style.backgroundColor;
            console.log(e);
            if (e.dataset) {
                node.dataset.device = e.dataset.device ||  '';
            }
           
            nodes.push(node);
        }
        var conns = instance.getAllConnections();
        if (conns && conns.length > 0) {
            for (var i = 0, len = conns.length; i < len; i++) {
                var con = conns[i], c = {};
                c.uuids = [con.endpoints[0].getUuid(), con.endpoints[1].getUuid()];
                edges.push(c);
            }
        }
        var data = {};
        data.nodes = nodes;
        data.edges = edges;
        localStorage.data = JSON.stringify(data);
    }
    function loadAll() {
        var json = JSON.parse(localStorage.data);
        var nodes = json.nodes, edges = json.edges;
        var layout = document.getElementById("jsLayout");
        for (var i = 0, len = nodes.length; i < len; i++) {
            var t = template(nodes[i]), id = nodes[i].id;
            addData(t);
            layout.appendChild(t)
            setTimeout(_registerEvent({ id: id }), 1);
            addPoint(id, jspConfig.my_endpoint)
        }
        for (var i = 0, len = edges.length; i < len; i++) {
            instance.connect({
                uuids: edges[i].uuids
            });
        }
    }
    function getInfomation(ele) {
        var type = $(ele).attr("id").split("_")[0];
        $(ele).popover({
            html: true,
            trigger: 'manual',
            container: 'body',
            title: '详情',
            content: $("#" + type + "").html()
        }).hover(function () {
            $(".popover").popover("hide");
            $(this).popover("show");
        }, function () {
            $(this).popover("hide")
        });
    }
    function addData(element) {
        if (!element)
            return;
        console.log(element)
        var dataLayer = element.children[1];
        var type = getType(element);
        switch (type) {
            case 'electric':
                dataLayer.innerHTML = "<div>electric</div>";
                break;
            case 'water':
                dataLayer.innerHTML = "<div>water</div>";
                break;
            case 'gas':
                dataLayer.innerHTML = "<div>gas</div>";
                break;
            case 'concentrator':
                dataLayer.innerHTML = "<div>concentrator</div>";
                break;
            case 'others':
                dataLayer.innerHTML = "<div>others</div>";
                break;
            default:
        }
    }
    function getType(element) {
        if (element && element.children && element.children[0].children)
            return element.children[0].children[0].className.split(" ")[2];
        return "other";
    }
    function connectDevices(element) {
        var device = document.getElementsByName("device")[0];
        var name = "未知设备";
        if (element && device) {
            var index = device.selectedIndex;

            element.dataset.device = device.options[index].value;
            name = device.options[index].text;
            setName(element, name);
        }

    }
</script>
