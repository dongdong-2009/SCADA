@{
    ViewData["Title"] = "Home Page";
}
<script src="~/lib/jsplumb/draggable.js"></script>
<script src="~/lib/jsplumb/jsplumb.js"></script>
<script src="~/lib/jsplumb/svg.js"></script>
<style>
    #FlowDesign, #FlowDesign > div {
        height: 90%;
        min-height: 650px;
    }

    .monitorObj {
        width: 100px;
        height: 60px;
        border: 1px solid #ccc;
        text-align: center;
        position: absolute;
        top: 0;
        left: 0;
    }

    .dragPoint {
    }

        .dragPoint:hover {
            background-color: aquamarine;
        }

    .dragHover {
        background-color: aquamarine;
    }


    #jsLayout {
        position: relative;
    }
</style>
<div id="FlowDesign" class="row">
    <h2 class="text-center">流程图设计界面</h2>
    <div class="col-sm-2">
        <div id="list" class="list-group">
            <a href="#" class="list-group-item" data-deviceType="Text" data-type="Text">
                <i class="glyphicon glyphicon-text-size"></i> 文本
            </a>
            <a href="#" class="list-group-item" data-deviceType="concentrator" data-type="concentrator">
                <i class="glyphicon glyphicon-bed"></i> 集中器
            </a>
            <a href="#" class="list-group-item" data-deviceType="water" data-type="water">
                <i class="glyphicon glyphicon-tint"></i> 水表
            </a>
            <a href="#" class="list-group-item" data-deviceType="electric" data-type="electric">
                <i class="glyphicon glyphicon-flash"></i> 电表
            </a>
            <a href="#" class="list-group-item" data-deviceType="gas" data-type="gas">
                <i class="glyphicon glyphicon-fire"></i> 汽表
            </a>
        </div>
    </div>
    <div class="col-sm-8  table-bordered" id="jsLayout">
    </div>
    <div class="col-sm-2">

    </div>
</div>
<script>
    (function () {
        var data = {
            nodes: [],
            edges: []
        }
        var jspConfig = {
            lineColor: "#2f8e00",
            endpointHoverStyle: {
                fill: "#216477",
                stroke: "#216477"
            },
            my_endpoint: {
                endpoint: ["Dot", { radius: 6 }],
                paintStyle: { fill: "#316b31" },
                isSource: true,
                connectorStyle: {
                    strokeWidth: 5,
                    stroke: "#316b31",
                },
                connector: ["Flowchart"],
                isTarget: true,
                beforeDrop: function (params) {
                    return confirm("Connect " + params.sourceId + " to " + params.targetId + "?");
                },
                //dropOptions: exampleDropOptions
            },
            init: function (connection) {
                connection.getOverlay("label").setLabel(connection.sourceId.substring(15) + "-" + connection.targetId.substring(15));
            }
        }
        jsPlumb.bind("ready", function () {
            var layout = document.getElementById("jsLayout");

            jsPlumb.setContainer('jsLayout');
            var instance = jsPlumb.getInstance({
                Endpoint: ["Dot", { radius: 2 }],
                EndpointHoverStyle: { fill: "orange" },
                HoverPaintStyle: { strokeStyle: "#orange", lineWidth: 2 },
                ConnectionOverlays: [
                    ["Arrow", { location: 1, id: "arrow", length: 10, foldback: 0.5, width: 10 }],
                    ["Label", { label: "1", id: "label-1", location: 0.25, cssClass: "labelstyle" }],
                ],
                DragOptions: { cursor: 'pointer', zIndex: 2000 },
                Anchors: ["TopCenter", "TopCenter"],
                PaintStyle: { stroke: '#666' },
                MaxConnections: 2,//最大连接数
            });

            // suspend drawing and initialise.
            instance.batch(function () {
                // listen for new connections; initialise them the same way we initialise the connections at startup.
                instance.bind("connection", function (connInfo, originalEvent) {
                    jspConfig.init(connInfo.connection);
                });
                //
                // listen for clicks on connections, and offer to delete connections on click.
                //
                instance.bind("click", function (conn, originalEvent) {
                    // if (confirm("Delete connection from " + conn.sourceId + " to " + conn.targetId + "?"))
                    //   instance.detach(conn);
                    conn.toggleType("basic");
                });
                sortable(document.getElementById('list'), function (item, evt) {
                    var startPoint = _isInCanvas(evt, layout);
                    if (startPoint) {
                        _createElements(startPoint, item.dataset.devicetype)
                    }
                });

                function _createElements(startPoint, eleType) {
                    var now = new Date();
                    var len = now.getMilliseconds();
                    var id = eleType + "_" + now.getMinutes() + now.getMilliseconds();
                    var node = {
                        id: id,
                        left: startPoint.x + "px",
                        top: startPoint.y + "px",
                        text: "节点" + len,
                        type: eleType,
                        icon: "glyphicon glyphicon-text-size"
                    }
                    document.getElementById("jsLayout").appendChild(template(node));

                    instance.addEndpoint(id, { anchor: "TopCenter" }, jspConfig.my_endpoint);
                    instance.addEndpoint(id, { anchor: "RightMiddle" }, jspConfig.my_endpoint);
                    instance.addEndpoint(id, { anchor: "BottomCenter" }, jspConfig.my_endpoint);
                    instance.addEndpoint(id, { anchor: "LeftMiddle" }, jspConfig.my_endpoint);
                    instance.draggable(id);
                    instance.repaintEverything();
                }
                function _addElement(newId) {


                };
                instance.bind("connectionDrag", function (connection) {
                    console.log(connection)
                    console.log("connection " + connection.id + " is being dragged. suspendedElement is ", connection.suspendedElement, " of type ", connection.suspendedElementType);
                });

                instance.bind("connectionDragStop", function (connection) {
                    console.log("connection " + connection.id + " was dragged");
                });

                instance.bind("connectionMoved", function (params) {
                    console.log("connection " + params.connection.id + " was moved");
                });
            });


            function _isInCanvas(evt, toElements) {//判断是否在相应的元素内
                var startPoint;
                if (toElements && evt && toElements.getBoundingClientRect()) {
                    ePosition = toElements.getBoundingClientRect();
                    if ((evt.clientX > ePosition.left && evt.clientX < ePosition.left + toElements.offsetWidth)
                        && (evt.clientY > ePosition.top && evt.clientY < ePosition.top + toElements.offsetHeight)) {
                        startPoint = { x: 0, y: 0 };
                        startPoint.x = (evt.clientX - ePosition.left).toFixed(2);
                        startPoint.y = (evt.clientY - ePosition.top).toFixed(2);
                    }
                }
                return startPoint;
            };
        });
    })()
    function template(node) {
        var div1Config = {
            id: node.id,
            className: "dragPoint monitorObj",
            style: {
                left: node.left,
                top: node.top,
            }
        };
        var div1 = createElement("div", div1Config);
        var div2 = createElement("div");

        var i = createElement("i", {
            className: node.icon
        })
        div2.appendChild(i);
        div2.appendChild(document.createTextNode(node.text))
        div1.appendChild(div2);
        return div1;
    }
    function createElement(eleType, options) {
        var elements = document.createElement(eleType);
        for (var key in options) {
            if (typeof options[key] == 'object') {
                var obj = options[key];
                for (var o in obj) {
                    var a = obj[o];
                    elements[key][o] = a;
                }
            } else {
                elements[key] = options[key]
            }
        }
        return elements;

    }
</script>