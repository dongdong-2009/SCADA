
@{
    ViewBag.Title = "Jsplumb";
}
<script src="~/Content/js/jsplumb.min.js"></script>
<style>
    .demo {
        /* for IE10+ touch devices */
        touch-action: none;
    }

    .flowchart-demo .window {
        border: 1px solid #346789;
        box-shadow: 2px 2px 19px #aaa;
        -o-box-shadow: 2px 2px 19px #aaa;
        -webkit-box-shadow: 2px 2px 19px #aaa;
        -moz-box-shadow: 2px 2px 19px #aaa;
        -moz-border-radius: 0.5em;
        border-radius: 0.5em;
        opacity: 0.8;
        width: 80px;
        height: 80px;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        text-align: center;
        z-index: 20;
        position: absolute;
        background-color: #eeeeef;
        color: black;
        font-family: helvetica, sans-serif;
        padding: 0.5em;
        font-size: 0.9em;
        -webkit-transition: -webkit-box-shadow 0.15s ease-in;
        -moz-transition: -moz-box-shadow 0.15s ease-in;
        -o-transition: -o-box-shadow 0.15s ease-in;
        transition: box-shadow 0.15s ease-in;
    }

        .flowchart-demo .window:hover {
            box-shadow: 2px 2px 19px #444;
            -o-box-shadow: 2px 2px 19px #444;
            -webkit-box-shadow: 2px 2px 19px #444;
            -moz-box-shadow: 2px 2px 19px #444;
            opacity: 0.6;
        }

    .flowchart-demo .active {
        border: 1px dotted green;
    }

    .flowchart-demo .hover {
        border: 1px dotted red;
    }

    #flowchartWindow1 {
        top: 34em;
        left: 5em;
    }

    #flowchartWindow2 {
        top: 7em;
        left: 36em;
    }

    #flowchartWindow3 {
        top: 27em;
        left: 48em;
    }

    #flowchartWindow4 {
        top: 23em;
        left: 22em;
    }

    .flowchart-demo .jtk-connector {
        z-index: 4;
    }

    .flowchart-demo .jtk-endpoint, .endpointTargetLabel, .endpointSourceLabel {
        z-index: 21;
        cursor: pointer;
    }

    .flowchart-demo .aLabel {
        background-color: white;
        padding: 0.4em;
        font: 12px sans-serif;
        color: #444;
        z-index: 21;
        border: 1px dotted gray;
        opacity: 0.8;
        cursor: pointer;
    }

        .flowchart-demo .aLabel.jtk-hover {
            background-color: #5C96BC;
            color: white;
            border: 1px solid white;
        }

    .window.jtk-connected {
        border: 1px solid green;
    }

    .jtk-drag {
        outline: 4px solid pink !important;
    }

    path, .jtk-endpoint {
        cursor: pointer;
    }

    .jtk-overlay {
        background-color: transparent;
    }
</style>
<style>
    #FlowDesign, #FlowDesign > div {
        height: 90%;
        min-height: 650px;
    }
</style>
<div id="FlowDesign" class="row">
    <h2 class="text-center">流程图设计界面</h2>
    <div class="col-sm-2">

    </div>
    <div class="col-sm-8  table-bordered">
        <div id="jsLayout" class="jtk-demo-canvas canvas-wide flowchart-demo jtk-surface jtk-surface-nopan">
            <div class="window jtk-node" id="flowchartWindow1"><strong>1</strong><br /><span class="glyphicon glyphicon-fire"></span><br /></div>
            <div class="window jtk-node" id="flowchartWindow2"><strong>2</strong><br /><span class="glyphicon glyphicon-fire"></span><br /></div>
            <div class="window jtk-node" id="flowchartWindow3"><strong>3</strong><br /><span class="glyphicon glyphicon-fire"></span><br /></div>
            <div class="window jtk-node" id="flowchartWindow4"><strong>4</strong><br /><span class="glyphicon glyphicon-fire"></span><br /></div>
        </div>
    </div>
    <div class="col-sm-2">

    </div>
</div>
<script>
    jsPlumb.ready(function () {

        var instance = jsPlumb.getInstance({
            Endpoint: ["Dot", { radius: 2 }],
            HoverPaintStyle: { strokeStyle: "#1e8151", lineWidth: 2 },
            ConnectionOverlays: [
                ["Arrow", { location: 1, id: "arrow", length: 10, foldback: 0.8, width: 10 }],
                ["Label", { label: "", id: "label", cssClass: "labelstyle" }]
            ],
            DragOptions: { zIndex: 2000 },
            Cantainer:"jsLayout"
        });
        var lineColor = '#2f8e00',
            basicType = {
                connector: "StateMachine",
                paintStyle: { stroke: "red", strokeWidth: 4 },
                hoverPaintStyle: { stroke: "blue" },
                overlays: [
                    "Arrow"
                ]
            };
        instance.registerConnectionType("basic", basicType);
        // this is the paint style for the connecting lines..
        var connectorPaintStyle = {
            strokeWidth: 2,
            stroke: "#61B7CF",
            joinstyle: "round",
            outlineStroke: "white",
            outlineWidth: 2
        },
            // .. and this is the hover style.
            connectorHoverStyle = {
                strokeWidth: 3,
                stroke: "#216477",
                outlineWidth: 5,
                outlineStroke: "white"
            },
            endpointHoverStyle = {
                fill: "#216477",
                stroke: "#216477"
            },
            // the definition of source endpoints (the small blue ones)
            sourceEndpoint = {
                endpoint: "Dot",
                paintStyle: {
                    stroke: "#7AB02C",
                    fill: "transparent",
                    radius: 7,
                    strokeWidth: 1
                },
                isSource: true,
                connector: ["Flowchart", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],
                connectorStyle: connectorPaintStyle,
                hoverPaintStyle: endpointHoverStyle,
                connectorHoverStyle: connectorHoverStyle,
                dragOptions: {},
                overlays: [
                    ["Label", {
                        location: [0.5, 1.5],
                        label: "Drag",
                        cssClass: "endpointSourceLabel",
                        visible: false
                    }]
                ]
            },
            // the definition of target endpoints (will appear when the user drags a connection)
            targetEndpoint = {
                endpoint: "Dot",
                paintStyle: { fill: "#7AB02C", radius: 7 },
                hoverPaintStyle: endpointHoverStyle,
                maxConnections: -1,
                dropOptions: { hoverClass: "hover", activeClass: "active" },
                isTarget: true,
                overlays: [
                    ["Label", { location: [0.5, -0.5], label: "Drop", cssClass: "endpointTargetLabel", visible: false }]
                ]
            },

            init = function (connection) {
                connection.getOverlay("label").setLabel(connection.sourceId.substring(15) + "-" + connection.targetId.substring(15));
            };
        var _addEndpoints = function (toId, sourceAnchors, targetAnchors) {
            for (var i = 0; i < sourceAnchors.length; i++) {
                var sourceUUID = toId + sourceAnchors[i];
                instance.addEndpoint("flowchart" + toId, sourceEndpoint, {
                    anchor: sourceAnchors[i], uuid: sourceUUID
                });
            }
            for (var j = 0; j < targetAnchors.length; j++) {
                var targetUUID = toId + targetAnchors[j];
                instance.addEndpoint("flowchart" + toId, targetEndpoint, { anchor: targetAnchors[j], uuid: targetUUID });
            }
        };
        // suspend drawing and initialise.
        instance.batch(function () {

            _addEndpoints("Window4", ["TopCenter", "BottomCenter"], ["LeftMiddle", "RightMiddle"]);
            _addEndpoints("Window2", ["LeftMiddle", "BottomCenter"], ["TopCenter", "RightMiddle"]);
            _addEndpoints("Window3", ["RightMiddle", "BottomCenter"], ["LeftMiddle", "TopCenter"]);
            _addEndpoints("Window1", ["LeftMiddle", "RightMiddle"], ["TopCenter", "BottomCenter"]);

            // listen for new connections; initialise them the same way we initialise the connections at startup.
            instance.bind("connection", function (connInfo, originalEvent) {
                init(connInfo.connection);
            });

            // make all the window divs draggable
            instance.draggable(jsPlumb.getSelector("#jsLayout .jtk-node"), { grid: [20, 20] });
            // THIS DEMO ONLY USES getSelector FOR CONVENIENCE. Use your library's appropriate selector
            // method, or document.querySelectorAll:
            //jsPlumb.draggable(document.querySelectorAll(".window"), { grid: [20, 20] });

            // connect a few up
            instance.connect({ uuids: ["Window2BottomCenter", "Window3TopCenter"], editable: true });
            instance.connect({ uuids: ["Window2LeftMiddle", "Window4LeftMiddle"], editable: true });
            instance.connect({ uuids: ["Window4TopCenter", "Window4RightMiddle"], editable: true });
            instance.connect({ uuids: ["Window3RightMiddle", "Window2RightMiddle"], editable: true });
            instance.connect({ uuids: ["Window4BottomCenter", "Window1TopCenter"], editable: true });
            instance.connect({ uuids: ["Window3BottomCenter", "Window1BottomCenter"], editable: true });
            //

            //
            // listen for clicks on connections, and offer to delete connections on click.
            //
            instance.bind("click", function (conn, originalEvent) {
                // if (confirm("Delete connection from " + conn.sourceId + " to " + conn.targetId + "?"))
                //   instance.detach(conn);
                conn.toggleType("basic");
            });

            instance.bind("connectionDrag", function (connection) {
                console.log("connection " + connection.id + " is being dragged. suspendedElement is ", connection.suspendedElement, " of type ", connection.suspendedElementType);
            });

            instance.bind("connectionDragStop", function (connection) {
                console.log("connection " + connection.id + " was dragged");
            });

            instance.bind("connectionMoved", function (params) {
                console.log("connection " + params.connection.id + " was moved");
            });
        });

        jsPlumb.fire("jsPlumbDemoLoaded", instance);
    });

    function initData(data) {
        var nodes = data.Nodes;
        var jumps = data.Jumps;
        //添加节点
        nodes.forEach(function (item, index, arr) {
            var $item = $('<div class="item" style="" id=""><span class="text"></span><span class="dragPoint"></span></div>')
            $item.attr({ 'id': item.Guid })
            $item.attr({ 'style': item.Style })
            $item.find('.text').text(item.Name.Chinese)
            $container.append($item)
        })
        //添加连线
        var windowsDrag = $('#container .item')
        renderConnect(windowsDrag);

        //------------更改样式-------------
        for (var i in jumps) {
            renderConnecter(jumps[i])
        }
    }
    function Data() {
        return {
            "nodes": [{
                "id": "start",
                "type": "start",
                "text": "Start",
                "left": 87,
                "top": 55,
                "w": 100,
                "h": 70
            },
            {
                "id": "question1",
                "type": "question",
                "text": "Do Something?",
                "left": 290,
                "top": 79,
                "w": 150,
                "h": 150
            },
            {
                "id": "decide",
                "type": "action",
                "text": "Make Decision",
                "left": 660,
                "top": 187,
                "w": 120,
                "h": 120
            },
            {
                "id": "something",
                "type": "output",
                "text": "Do Something",
                "left": 827,
                "top": 414,
                "w": 120,
                "h": 50
            },
            {
                "id": "question2",
                "type": "question",
                "text": "Do Nothing?",
                "left": 74,
                "top": 330,
                "w": 150,
                "h": 150
            },
            {
                "id": "nothing",
                "type": "output",
                "text": "Do Nothing",
                "left": 433,
                "top": 558,
                "w": 100,
                "h": 50
            }],
            "edges": [
                {
                    "source": "start",
                    "target": "question1",
                    "data": {}
                },
                {
                    "source": "question1",
                    "target": "decide",
                    "data": {
                        "label": "yes",
                        "type": "connection"
                    }
                },
                {
                    "source": "question1",
                    "target": "question2",
                    "data": {
                        "label": "no",
                        "type": "connection"
                    }
                },
                {
                    "source": "decide",
                    "target": "nothing",
                    "data": {
                        "label": "Can't Decide",
                        "type": "connection"
                    }
                },
                {
                    "source": "decide",
                    "target": "something",
                    "data": {
                        "label": "Decision Made",
                        "type": "connection"
                    }
                },
                {
                    "source": "question2",
                    "target": "decide",
                    "data": {
                        "label": "no",
                        "type": "connection"
                    }
                },
                {
                    "source": "question2",
                    "target": "nothing",
                    "data": {
                        "label": "yes",
                        "type": "connection"
                    }
                }
            ],
            "ports": [],
            "groups": []
        }
    }
</script>
